{
  "name": "Wedding",
  "tagline": "My first personal ASP.NET MVC-project, made for my wedding.",
  "body": "# Wedding\r\nMy first personal MVC-project was this wedding site. \r\nAs a product owner, I do see a lot of code in my everyday job, but don't get to code much myself.<br>\r\nThe aim was to create an MVC-application in ASP.NET to learn basic setups of the trade, plus to provide myself and Lisa with an easy-to-use platform as a wedding RSVP-application with infos, images etc.<br><br>\r\n\r\n### Phase 1\r\nIn practical terms, this meant setting up an SQL-server database in Azure, where I created a set of guests, and combined them into couples and families by adding a token, which was then sent to them on the back of their invitation.<br>\r\nUpon login in to the site via one of the external providers used (Facebook, Microsoft, Google) or by creating a local account, they were prompted with an input where the token was added, which then gave them access to RSVP to their whole family.<br>\r\nThe RSVP itself was editable, so the token was stored together with the userid in the ASPNetUsers-table.<br><br>\r\n\r\n### Phase 2\r\nOnce the project was up and running, and the RSVP's started flowing in, I began creating an image-uploading service. To do this, I created a blog-storage on Azure, and an upload-page in my application. However, the images uploaded were too large to show on the web, so to retain the original-size, as well as providing fast-loading copies, I created an Azure-webjob and a queue which resized the images. I then added the resized-uri to the database and showed that in the views.\r\n<br><br>\r\nPart of the first upload to blob:<br>\r\n```c#\r\n \r\n for (int i = 0; i < files.Count(); i++)\r\n {\r\n     var file = files[i];\r\n\r\n     var exifcreateddatetime = new DateTime(2020, 3, 24, 8, 43, 00);\r\n     String fileextention;\r\n     fileextention = Path.GetExtension(file.FileName).ToLower();\r\n\r\n     String uploadtime = DateTime.Now.ToString(\"yyyy-MM-dd-HH:mm:ss.fff\");\r\n\r\n     CloudBlockBlob blockBlob = container.GetBlockBlobReference(uploadtime + fileextention);\r\n\r\n     blockBlob.UploadFromStream(file.InputStream);\r\n\r\n```\r\n<br>\r\nIn order to read the EXIF-data from the uploaded images (for sorting on date-taken), I had to play around quite a bit. I solved it like this:<br>\r\n```c#\r\n file.InputStream.Position = 0;\r\n\r\n        byte[] imageData = new byte[file.ContentLength];\r\n\r\n        file.InputStream.Read(imageData, 0, file.ContentLength);\r\n\r\n        using (Stream inputStream = file.InputStream)\r\n        {\r\n            MemoryStream ms = inputStream as MemoryStream;\r\n            if (ms == null)\r\n            {\r\n                ms = new MemoryStream(imageData);\r\n                StreamReader sr = new StreamReader(ms);\r\n\r\n                inputStream.CopyTo(ms);\r\n            }\r\n\r\n            Image originalImage = Image.FromStream(ms);\r\n\r\n            exifcreateddatetime = new DateTime(2020, 3, 24, 8, 43, 00);\r\n\r\n            int DateTakenValue = 0x9003; //36867;\r\n            CultureInfo provider = CultureInfo.InvariantCulture;\r\n\r\n            if (!originalImage.PropertyIdList.Contains(DateTakenValue))\r\n            {\r\n                exifcreateddatetime = new DateTime(2020, 3, 24, 8, 43, 00);\r\n            }\r\n            else\r\n            {\r\n                string dateTakenTag = System.Text.Encoding.ASCII.GetString(originalImage.GetPropertyItem(DateTakenValue).Value);\r\n                string[] parts = dateTakenTag.Split(':', ' ');\r\n                int year = int.Parse(parts[0]);\r\n                int month = int.Parse(parts[1]);\r\n                int day = int.Parse(parts[2]);\r\n                int hour = int.Parse(parts[3]);\r\n                int minute = int.Parse(parts[4]);\r\n                int second = int.Parse(parts[5]);\r\n\r\n                exifcreateddatetime = new DateTime(year, month, day, hour, minute, second);\r\n            }\r\n        }\r\n\r\n```\r\n<br>\r\nA quick schema of the upload and image-resize through webjob *(webjob not present in this repo)*<br>\r\n![webjob schema](/Readmefiles/azure_webjob_schema.jpg)<br><br>\r\n\r\nI then uploaded parameters to the media-table in the database and showed it on an admin-page for approval, before exposing the images to all the guests.<br>\r\n<hr>\r\n\r\n<br>\r\nWhat I learnt and experimented with during the project:\r\n* GoogleMaps-styling (see Views/Start/Info)\r\n* MDL-styling framework utilized throughout\r\n* Responsive design with viewports Tablet, Phone and Desktop in mind\r\n* Entity Framework\r\n* SQL-database setup\r\n* C#\r\n* ASP.NET\r\n* Some Jquery\r\n* Azure webjobs *(not in this repo)*\r\n* Azure blobstorage and queue *(not in this repo)*\r\n\r\nWhat I experimented with somewhat but didn't finalize:\r\n* Google Matrix API, to be able to create a commuter-service for the guests\r\n* A toast-master chat which was supposed to be hashed to not be visible in database (to me, the groom). See the Toast-section of the repo.\r\n* Various small API's that I was too unskilled to implement\r\n\r\n\r\n## Screenshots\r\n<br><br>\r\n![Desktop Frontpage](/Readmefiles/frontpage.JPG)\r\nThe startpage on desktop.<br>\r\n\r\n![Mobile Frontpage w menu open](/Readmefiles/mobilestart.JPG)<br>\r\nThe startpage on mobile portrait, with MDL-mobile menu opened.<br>\r\n\r\n![Part of the guest-form](/Readmefiles/guest.JPG)<br>\r\nPart of the guest-form where they filled out their contact info, food prefs and lodging prefs (swedish).<br>\r\n\r\n![Desktop Image-page w uploadform opened](/Readmefiles/bilder.JPG)\r\nThe image-page on desktop, with image-uploadform opened.<br>\r\n<br><br>\r\n\r\n## References (some of them):\r\n* https://getmdl.io/\r\n* https://azure.microsoft.com/sv-se/documentation/articles/websites-dotnet-webjobs-sdk-get-started/\r\n* http://stackoverflow.com/questions/36869097/azure-webjobs-blob-trigger-multiple-resizes\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}